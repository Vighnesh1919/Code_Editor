// Importing the httpRouter to define HTTP routes in Convex
import { httpRouter } from "convex/server";

// Importing httpAction to handle custom HTTP logic
import { httpAction } from "./_generated/server";

// Type definition for Clerk webhook events
import { WebhookEvent } from "@clerk/nextjs/server";

// Webhook utility from Svix (used to verify Clerk's webhook signature)
import { Webhook } from "svix";

// API routes (mutation endpoints) auto-generated by Convex
import { api, internal } from "./_generated/api";

// Initialize the HTTP router instance
const http = httpRouter();






// Define a POST route for Clerk webhook events
http.route({
  path: "/clerk-webhook", // URL endpoint
  method: "POST",         // Accept only POST requests
  handler: httpAction(async (ctx, request) => { // Handler function
    // Fetch Clerk webhook secret from environment variables
    const webhookSecret = process.env.CLERK_WEBHOOK_SECRET;  // check this in the setting then the environmenta variables i  the convex on google
    if (!webhookSecret) {
      throw new Error("Missing CLERK_WEBHOOK_SECRET environment variable");
    }

    // Extract the required Svix headers for signature verification
    const svix_id = request.headers.get("svix-id");
    const svix_signature = request.headers.get("svix-signature");
    const svix_timestamp = request.headers.get("svix-timestamp");

    // If any required header is missing, return 400 Bad Request
    if (!svix_id || !svix_signature || !svix_timestamp) {
      return new Response("Error occurred -- no svix headers", {
        status: 400,
      });
    }

    // Parse the JSON payload and stringify it for signature verification
    const payload = await request.json();
    const body = JSON.stringify(payload);

    // Create a new Webhook instance using the Clerk secret
    const wh = new Webhook(webhookSecret);
    let evt: WebhookEvent;

    try {
      // Verify the webhook using Svix verification
      evt = wh.verify(body, {
        "svix-id": svix_id,
        "svix-timestamp": svix_timestamp,
        "svix-signature": svix_signature,
      }) as WebhookEvent;
    } catch (err) {
      // Log and return an error if verification fails
      console.error("Error verifying webhook:", err);
      return new Response("Error occurred", { status: 400 });
    }

    // Extract the type of webhook event (e.g., user.created)
    const eventType = evt.type;

    // Handle the "user.created" event
    if (eventType === "user.created") {
      // Destructure required fields from the event payload
      const { id, email_addresses, first_name, last_name } = evt.data;

      // Get the primary email address of the user
      const email = email_addresses[0].email_address;

      // Concatenate first and last name
      const name = `${first_name || ""} ${last_name || ""}`.trim();

      try {
        // Run a mutation to sync the user into the Convex database
        await ctx.runMutation(api.users.syncUser, {
          userId: id,
          email,
          name,
        });
      } catch (error) {
        // Log and return error if database insertion fails
        console.log("Error creating user:", error);
        return new Response("Error creating user", { status: 500 });
      }
    }

    // Respond with success if all went well
    return new Response("Webhook processed successfully", { status: 200 });
  }),
});

// Export the router so Convex can recognize and deploy it
export default http;
